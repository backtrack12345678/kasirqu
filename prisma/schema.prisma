generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  CASHIER
  WAITER
}

enum CashBookStatus {
  BUKA
  TUTUP
}

enum OrderStatus {
  PENDING
  DITERIMA
  DIBAYAR
  DIBATALKAN
}

enum TransactionType {
  PENJUALAN
  PEMBELIAN
  MODAL
}

enum OrderMethodPayment {
  CASH
  TRANSFER
  EWALLET
  QRIS
}

enum SubscriptionStore {
  APP_STORE
  PLAY_STORE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

model User {
  id         String         @id @db.VarChar(150)
  phone      String         @unique @db.VarChar(20)
  nama       String         @db.VarChar(100)
  role       UserRole       @default(OWNER)
  kotaKabId  Int            @map("kota_kab_id")
  kota_kab   Kota_Kabupaten @relation(fields: [kotaKabId], references: [id])
  isActive   Boolean        @default(true) @map("is_active")
  acceptTerm Boolean        @map("accept_term")

  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime?             @updatedAt @map("updated_at")
  refreshToken        Refresh_Token?
  employees           Employee[]
  categories          Category[]
  products            Product[]
  cashBooks           CashBook[]
  subscriptions       UserSubscriptions[]
  subscriptionHistory SubscriptionHistory[]

  @@map("user")
}

model Employee {
  id       String   @id @db.VarChar(150)
  email    String   @unique @db.VarChar(200)
  nama     String   @db.VarChar(100)
  role     UserRole
  password String   @db.VarChar(100)
  isActive Boolean  @default(true) @map("is_active")
  ownerId  String   @map("owner_id") @db.VarChar(150)
  owner    User     @relation(fields: [ownerId], references: [id])

  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime?      @updatedAt @map("updated_at")
  orders    Order[]
  payments  OrderPayment[]

  @@map("employee")
}

model Kota_Kabupaten {
  id   Int    @id @default(autoincrement())
  kode String @db.VarChar(10)
  nama String @db.VarChar(150)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  user      User[]

  @@map("kota_kabupaten")
}

model Product {
  id         Int      @id @default(autoincrement())
  nama       String   @db.VarChar(100)
  harga      Decimal  @db.Decimal(18, 2)
  modal      Decimal? @db.Decimal(18, 2)
  jumlah     Int
  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])
  ownerId    String   @map("owner_id") @db.VarChar(150)
  owner      User     @relation(fields: [ownerId], references: [id])
  namaFile   String   @map("nama_file") @db.VarChar(150)
  path       String   @db.VarChar(150)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("product")
}

model Category {
  id      Int    @id @default(autoincrement())
  nama    String @db.VarChar(100)
  ownerId String @map("owner_id") @db.VarChar(150)
  owner   User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  products  Product[]

  @@map("category")
}

model CashBook {
  id String @id @db.VarChar(150)

  saldoTunai Decimal        @db.Decimal(18, 2)
  status     CashBookStatus @default(BUKA)

  ownerId String @map("owner_id") @db.VarChar(150)
  owner   User   @relation(fields: [ownerId], references: [id])

  createdId   String   @db.VarChar(150)
  createdName String   @db.VarChar(100)
  createdRole UserRole

  closedId   String?   @db.VarChar(150)
  closedName String?   @db.VarChar(100)
  closedRole UserRole?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  orders    Order[]

  @@map("cash_book")
}

model Order {
  id String @id @db.VarChar(150)

  customer   String      @db.VarChar(100)
  status     OrderStatus @default(PENDING)
  totalHarga Decimal     @db.Decimal(18, 2)

  createdId   String?   @db.VarChar(150)
  createdName String?   @db.VarChar(100)
  createdRole UserRole?
  createdBy   Employee? @relation(fields: [createdId], references: [id])

  cashBookId String   @map("order_book_id") @db.VarChar(150)
  book       CashBook @relation(fields: [cashBookId], references: [id])

  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime?      @updatedAt @map("updated_at")
  products  OrderProduct[]
  payments  OrderPayment[]

  @@map("order")
}

model OrderPayment {
  id Int @id @default(autoincrement())

  metode OrderMethodPayment @default(CASH)
  jumlah Decimal            @db.Decimal(18, 2)

  receivedId   String   @db.VarChar(150)
  receivedName String   @db.VarChar(100)
  receivedRole UserRole
  receivedBy   Employee @relation(fields: [receivedId], references: [id], onDelete: Cascade)

  orderId String @db.VarChar(150)
  order   Order  @relation(fields: [orderId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("order_payment")
}

model OrderProduct {
  id Int @id @default(autoincrement())

  nama   String  @db.VarChar(100)
  harga  Decimal @db.Decimal(18, 2)
  jumlah Int

  orderId String @db.VarChar(150)
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("order_product")
}

model UserSubscriptions {
  id String @id @db.VarChar(150)

  ownerId String @map("owner_id") @db.VarChar(150)
  owner   User   @relation(fields: [ownerId], references: [id])

  productId String             @db.VarChar(100)
  store     SubscriptionStore
  status    SubscriptionStatus
  autoRenew Boolean

  purchasedAt DateTime  @map("purchased_at")
  expiredAt   DateTime  @map("expired_at")
  canceledAt  DateTime? @map("canceled_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  @@unique([ownerId, productId])
  @@map("user_subscriptions")
}

model SubscriptionHistory {
  id String @id @db.VarChar(150)

  ownerId String @map("owner_id") @db.VarChar(150)
  owner   User   @relation(fields: [ownerId], references: [id])

  productId String             @db.VarChar(100)
  price     Decimal?           @db.Decimal(18, 2)
  currency  String?            @db.VarChar(10)
  event     String
  store     SubscriptionStore
  status    SubscriptionStatus
  autoRenew Boolean

  purchasedAt DateTime  @map("purchased_at")
  expiredAt   DateTime  @map("expired_at")
  canceledAt  DateTime? @map("canceled_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  @@map("SubscriptionHistory")
}

model Refresh_Token {
  id                Int     @id @default(autoincrement())
  userId            String  @unique @map("user_id") @db.VarChar(150)
  user              User    @relation(fields: [userId], references: [id])
  refreshToken      String  @map("refresh_token") @db.VarChar(250)
  notificationToken String? @map("notification_token") @db.VarChar(250)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("refresh_token")
}
